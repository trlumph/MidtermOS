; Forked from the parent process

execve("build/task4", ["build/task4"], 0xfffff1aac5c0 /* 53 vars */) = 0
; Starts the program, loads the executable into memory. 

brk(NULL)                               = 0xaaaacf260000
; Adjusts the end of the data segment 

mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xffffa605c000
; Mmap for the program's runtime needs.

faccessat(AT_FDCWD, "/etc/ld.so.preload", R_OK) = -1 ENOENT (No such file or directory)
; Checks if "/etc/ld.so.preload" exists to preload any libraries, not found here.

openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=73975, ...}, AT_EMPTY_PATH) = 0
mmap(NULL, 73975, PROT_READ, MAP_PRIVATE, 3, 0) = 0xffffa6014000
close(3)                                = 0
; Loads the shared library cache for resolving library dependencies.

openat(AT_FDCWD, "/lib/aarch64-linux-gnu/libstdc++.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0\267\0\1\0\0\0\0\0\0\0\0\0\0\0"..., 832) = 832
newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=2190736, ...}, AT_EMPTY_PATH) = 0
mmap(NULL, 2332704, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xffffa5dda000
mmap(0xffffa5de0000, 2267168, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0) = 0xffffa5de0000
munmap(0xffffa5dda000, 24576)           = 0
munmap(0xffffa600a000, 38944)           = 0
mprotect(0xffffa5fea000, 61440, PROT_NONE) = 0
mmap(0xffffa5ff9000, 57344, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x209000) = 0xffffa5ff9000
mmap(0xffffa6007000, 10272, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xffffa6007000
close(3)                                = 0
; Opens and maps sections of the C++ standard library.

openat(AT_FDCWD, "/lib/aarch64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0\267\0\1\0\0\0\340u\2\0\0\0\0\0"..., 832) = 832
newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=1641496, ...}, AT_EMPTY_PATH) = 0
mmap(NULL, 1810024, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xffffa5c26000
mmap(0xffffa5c30000, 1744488, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0) = 0xffffa5c30000
munmap(0xffffa5c26000, 40960)           = 0
munmap(0xffffa5dda000, 24168)           = 0
mprotect(0xffffa5db9000, 61440, PROT_NONE) = 0
mmap(0xffffa5dc8000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x188000) = 0xffffa5dc8000
mmap(0xffffa5dce000, 48744, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xffffa5dce000
close(3)                                = 0
; Opens and maps sections of the C standard library

openat(AT_FDCWD, "/lib/aarch64-linux-gnu/libm.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0\267\0\1\0\0\0\0\0\0\0\0\0\0\0"..., 832) = 832
newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=551064, ...}, AT_EMPTY_PATH) = 0
mmap(NULL, 680048, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xffffa5b89000
mmap(0xffffa5b90000, 614512, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0) = 0xffffa5b90000
munmap(0xffffa5b89000, 28672)           = 0
munmap(0xffffa5c27000, 32880)           = 0
mprotect(0xffffa5c16000, 61440, PROT_NONE) = 0
mmap(0xffffa5c25000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x85000) = 0xffffa5c25000
close(3)                                = 0
; Opens and maps sections of the math library

openat(AT_FDCWD, "/lib/aarch64-linux-gnu/libgcc_s.so.1", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0\267\0\1\0\0\0\0\0\0\0\0\0\0\0"..., 832) = 832
newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=84296, ...}, AT_EMPTY_PATH) = 0
mmap(NULL, 213704, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xffffa5b5b000
mmap(0xffffa5b60000, 148168, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0) = 0xffffa5b60000
munmap(0xffffa5b5b000, 20480)           = 0
munmap(0xffffa5b85000, 41672)           = 0
mprotect(0xffffa5b74000, 61440, PROT_NONE) = 0
mmap(0xffffa5b83000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x13000) = 0xffffa5b83000
close(3)                                = 0
;  GCC low-level runtime library

mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xffffa605a000
set_tid_address(0xffffa605aaf0)         = 2507
set_robust_list(0xffffa605ab00, 24)     = 0
rseq(0xffffa605b1c0, 0x20, 0, 0xd428bc00) = 0
mprotect(0xffffa5dc8000, 16384, PROT_READ) = 0
mprotect(0xffffa5b83000, 4096, PROT_READ) = 0
mprotect(0xffffa5c25000, 4096, PROT_READ) = 0
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xffffa6058000
mprotect(0xffffa5ff9000, 45056, PROT_READ) = 0
mprotect(0xaaaac61a1000, 4096, PROT_READ) = 0
mprotect(0xffffa6061000, 8192, PROT_READ) = 0
; Sets protection on memory segments after mapping libraries

prlimit64(0, RLIMIT_STACK, NULL, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0
; Retrieves and/or sets the resource limits for the stack.

munmap(0xffffa6014000, 73975)           = 0
; Unmaps memory segments

getrandom("\x89\xa5\xf0\xa2\xd6\x68\x80\x6f", 8, GRND_NONBLOCK) = 8
brk(NULL)                               = 0xaaaacf260000
brk(0xaaaacf281000)                     = 0xaaaacf281000
futex(0xffffa60077a4, FUTEX_WAKE_PRIVATE, 2147483647) = 0

; --------------- MAIN --------------
rt_sigaction(SIGUSR1, {sa_handler=0xaaaac6190ad4, sa_mask=[USR1], sa_flags=SA_RESTART}, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0
rt_sigaction(SIGUSR2, {sa_handler=0xaaaac6190b20, sa_mask=[USR2], sa_flags=SA_RESTART}, {sa_handler=SIG_DFL, sa_mask=[], sa_flags=0}, 8) = 0
; Registers signal handlers for SIGUSR1 and SIGUSR2

ppoll(NULL, 0, NULL, NULL, 281474510938016) = ? ERESTARTNOHAND (To be restarted if no handler)
; Waits for signals, corresponds to the `pause()` in the main loop.

; SIGUSR1 received from load (second program)
--- SIGUSR1 {si_signo=SIGUSR1, si_code=SI_USER, si_pid=2511, si_uid=1000} ---
newfstatat(1, "", {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0), ...}, AT_EMPTY_PATH) = 0
; Checks the status of file descriptor 1 (stdout) before writing.

write(1, "Hello!\n", 7)                 = 7
; std::cout << "Hello!" << std::endl;

rt_sigreturn({mask=[]})                 = -1 EINTR (Interrupted system call)
; Returns from the signal handler execution to the previous state

ppoll(NULL, 0, NULL, NULL, 281474510938016) = ? ERESTARTNOHAND (To be restarted if no handler)
; Waits for signals, corresponds to the `pause()` in the main loop.

; SIGUSR2 received from load (second program)
--- SIGUSR2 {si_signo=SIGUSR2, si_code=SI_USER, si_pid=2511, si_uid=1000} ---
; Exits the program (SIGUSR2 handler).
exit_group(0)                           = ?
; ----------------- END OF MAIN -----------------------
+++ exited with 0 +++

